
public class ESManager {

//    private static int PORT = 9300;

    private static volatile TransportClient tclient  = null;
    /**
     * Parameter	                                Description
     client.transport.ignore_cluster_name           Set to true to ignore cluster name validation of connected nodes. (since 0.19.4)

     client.transport.ping_timeout                  The time to wait for a ping response from a node. Defaults to 5s.

     client.transport.nodes_sampler_interval        How often to sample / ping the nodes listed and connected. Defaults to 5s.

     */
    private static TransportClient getTransportClient(){
        String analyzer_name_index = AnsjAnalyzer.TYPE.index_ansj.name();
        String analyzer_name_query = AnsjAnalyzer.TYPE.query_ansj.name();
        Settings settings = Settings.builder()
                .put("cluster.name", "elasticsearch")
//                .put("number_of_shards", 1)
//        "analysis" : {
//            "analyzer":{
//                "content":{
//                    "type":"custom",
//                            "tokenizer":"whitespace"
//                }
//            }
//        }
//                .put("analysis.analyzer.content.type","ansj")
//                .put("analysis.analyzer.content.type",analyzer_name_query)
//                .put("index.analysis.analyzer.default.type",analyzer_name_index)
//                .put("index.analysis.analyzer.default_search.type",analyzer_name_query)
                .build();
        // on startup
        TransportClient client = new PreBuiltTransportClient(settings);
        try {
            //默认端口号9300，url访问127.0.0.1:9200,端口不一样
//            String ip = "127.0.0.1";
//            int port = 9300;
            String ip = ConfigProperties.IP;
            int port = ConfigProperties.PORT;

            System.out.println(ip+":"+port);
            InetAddress ia = InetAddress.getByName(ip);
            System.out.println(ia);
            client.addTransportAddress(new TransportAddress(ia, port));

        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        // on shutdown
        //client.close();
        return client;
    }
    private static TransportClient getESClient(){
        if (tclient==null){
            System.setProperty("es.set.netty.runtime.available.processors", "false");
            synchronized (ESManager.class) {
                if (tclient == null) {
                    tclient = getTransportClient();
                }
            }

        }
        return tclient;
    }
    public static void createIndex(String index) {
        TransportClient client = getESClient();
        XContentBuilder settings = getSettingsBuilder();
        //创建index时，设置settings默认中文分词
        CreateIndexResponse cir = client.admin().indices().prepareCreate(index)
                .setSettings(settings).execute().actionGet();
        if (cir.isAcknowledged()){
            System.out.println("create "+index+" index success!");
        }
    }
    public static void deleteIndex(String index){
//        String index = "news";
        TransportClient client = getESClient();
        IndicesAdminClient iac = client.admin().indices();
        DeleteIndexRequestBuilder dirb = iac.prepareDelete(index);
        DeleteIndexResponse dir = dirb.execute().actionGet();
        if (dir.isAcknowledged()){
            System.out.println("delete "+index+" index success");
        }
    }

//            "settings": {
//                "analysis": {
//                    "analyzer": {
//                        "default": {
//                            "tokenizer": "base_ansj"
//                        }
//                    }
//                }
//            },
//            "mappings": {
//                "_doc": {
//                    "properties": {
//                        "title": {
//                            "type": "text"
//                        }
//                    }
//                }
//            }

    /**
     *
     * @return
     */
    public static XContentBuilder getSettingsBuilder(){
        try{
            //settings
            XContentBuilder builder =  XContentFactory.jsonBuilder()
                    .startObject()
                    .startObject("analysis")
                    .startObject("analyzer")
                    .startObject("default")
//                    .field("tokenizer", analyzer)
                      .field("tokenizer", "index_ansj")
                    .endObject()
                    .endObject()
//                   .field("analyzer","base_ansj")
                    .endObject()
                    .endObject();
            return builder;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * meta-fields include the document’s _index, _type, _id, and _source fields.
     * a simple type like text, keyword, date, long, double, boolean or ip,integer
     * @return
     */
    public static XContentBuilder getMappingsBuilder(){
        try{
            //mappings
            XContentBuilder builder =  XContentFactory.jsonBuilder()
                    .startObject()
                    .startObject("_doc")
                    .startObject("properties")
                    .startObject("title")
                    .field("type", "text")
//                    .field("analyzer", "base_ansj")
                    .endObject()
                    .startObject("content")
                    .field("type", "text")
                    .endObject()
                    .startObject("author")
                    .field("type", "keyword")
                    .endObject()
                    .startObject("time")
                    .field("type", "date")
//                   .field("format", "date_hour_minute_second ")
                    .field("format", "yyyy-MM-dd HH:mm:ss")
                    .endObject()
                    .endObject()
                    .endObject()
                    .endObject();
            return builder;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     POST news/_close
     PUT news/_settings
     {
     "analysis" : {
     "analyzer" : {
     "default" : {
     "type" : "base_ansj"
     }
     }
     }
     }
     POST news/_open

     GET news/_settings
     */
    public static void setSettings(String index){
//        String index = "news";
        //创建完index，要设置settings默认中文分词，必须先close index更改settings,然后再open index
        //参考https://stackoverflow.com/questions/34894671/set-default-analyzer-of-index
        TransportClient client = getESClient();

        IndicesAdminClient iac = client.admin().indices();

        CloseIndexRequestBuilder cirb = iac.prepareClose(index);
        CloseIndexResponse cir = cirb.execute().actionGet();
        if (cir.isAcknowledged()){
            System.out.println("close success");
//            System.out.println(cir.toString());
        }

        UpdateSettingsRequestBuilder usrb = iac.prepareUpdateSettings(index);
        XContentBuilder xcb = getSettingsBuilder();
        String source="";
        try {
            source = xcb.string();
        } catch (IOException e) {
            e.printStackTrace();
        }
        usrb.setSettings(source,xcb.contentType());
        UpdateSettingsResponse usr = usrb.execute().actionGet();
        if (usr.isAcknowledged()){
            System.out.println("update success");
        }


        OpenIndexRequestBuilder oirb = iac.prepareOpen(index);
        OpenIndexResponse oir = oirb.execute().actionGet();
        if (oir.isAcknowledged()){
            System.out.println("open success");
        }
        GetSettingsRequestBuilder gsrb = iac.prepareGetSettings(index);
        GetSettingsResponse gsr = gsrb.execute().actionGet();
        ImmutableOpenMap<String, Settings> iomap = gsr.getIndexToSettings();
        System.out.println(iomap);


    }
    public static void setMappings(String index,String type){
        TransportClient client = getESClient();
        IndicesAdminClient iac = client.admin().indices();

        XContentBuilder mappings = getMappingsBuilder();
        PutMappingRequest mappingRequest = Requests.putMappingRequest(index).type(type).source(mappings);
        PutMappingResponse pmr = iac.putMapping(mappingRequest).actionGet();
        if (pmr.isAcknowledged()){
            System.out.println("put mappings success!");
        }
    }
    /**
     * loc:存储位置：index，type,id
     * doc:存储文档内容
     *
     * 节点 说明
     _index	文档存储的地方--数据库
     _type	文档代表的对象的类--表
     _id	文档的唯一标识--id
     * @return
     */
    public static int index(String index, String type, String id,Map<String, Object> doc) {

        TransportClient client = getESClient();

//        Map<String, Object> json = new HashMap<String, Object>();
//        json.put("user","孙悟空");
//        json.put("postDate",new Date());
//        json.put("message","trying out Elasticsearch");

//        XContentBuilder setting = getSettingBuilder();
//        PutMappingRequest mappingRequest = Requests.putMappingRequest(index).type(type).source(setting);
//        client.admin().indices().putMapping(mappingRequest);

        //prepareIndex(String index, String type, @Nullable String id) {
        IndexRequestBuilder indexBuilder = client.prepareIndex(index,type,id);
        try {
            XContentBuilder contentBuilder = jsonBuilder();
            Set<String> keys = doc.keySet();
            contentBuilder.startObject();
            for (String key:keys) {
                Object v = doc.get(key);
                contentBuilder.field(key, v);
            }
            contentBuilder.endObject();
            //IndexResponse response =  indexBuilder.setSource(map).get();
            IndexResponse response =  indexBuilder.setSource(contentBuilder).get();
            // Index name
            String _index = response.getIndex();
            // Type name
            String _type = response.getType();
             // Document ID (generated or not)
            String _id = response.getId();
            // Version (if it's the first time you index this document, you will get: 1)
            long _version = response.getVersion();
            // status has stored current instance statement.
            RestStatus restStatus = response.status();//RestStatus
            int status =  restStatus.getStatus();
            System.out.println(_index);
            System.out.println(_type);
            System.out.println(_id);
            System.out.println(_version);
            System.out.println(status);
            return  status;
        } catch (Exception e) {
            e.printStackTrace();
            return -1;
        }


    }
    public static Map<String,Object> get(String index, String type, String id) {
        TransportClient client = getESClient();
        GetRequestBuilder getBuilder = client.prepareGet(index,type,id);
        Map<String,Object>  map = getBuilder.get().getSource();
//        System.out.println(map);
        return map;
    }


    public static int delete(String index, String type, String id) {
        TransportClient client = getESClient();
        DeleteResponse response = client.prepareDelete(index,type,id).get();
        RestStatus restStatus = response.status();
        int status =  restStatus.getStatus();
        System.out.println(status);
//        return status==200;
        return status;
    }


    public static int update(){
        TransportClient client = getESClient();

        try {
            client.prepareUpdate("ttl", "doc", "1")
                    .setScript(new Script(ScriptType.INLINE,null,null,null))
                    .get();

            client.prepareUpdate("ttl", "doc", "1")
                    .setDoc(jsonBuilder()
                            .startObject()
                            .field("gender", "male")
                            .endObject())
                    .get();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return -1;
    }
    public static int update2(){
        TransportClient client = getESClient();
        UpdateRequest updateRequest = new UpdateRequest();
        updateRequest.index("index");
        updateRequest.type("_doc");
        updateRequest.id("1");
        try {
            updateRequest.doc(jsonBuilder()
                    .startObject()
                    .field("gender", "male")
                    .endObject());
            client.update(updateRequest).get();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return -1;
    }
    //有改，无加
    public static void upsert(){
        TransportClient client = getESClient();
        try {
            IndexRequest indexRequest = new IndexRequest("index", "type", "1")
                    .source(jsonBuilder()
                            .startObject()
                            .field("name", "Joe Smith")
                            .field("gender", "male")
                            .endObject());
            UpdateRequest updateRequest = new UpdateRequest("index", "type", "1")
                    .doc(jsonBuilder()
                            .startObject()
                            .field("gender", "male")
                            .endObject())
                    .upsert(indexRequest);
            client.update(updateRequest).get();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    //多个查询
    public static void multiGet(){
        TransportClient client = getESClient();
        MultiGetResponse multiGetItemResponses = client.prepareMultiGet()
                .add("twitter", "_doc", "1")
                .add("twitter", "_doc", "2", "3", "4")
                .add("another", "_doc", "foo")
                .get();

        for (MultiGetItemResponse itemResponse : multiGetItemResponses) {
            GetResponse response = itemResponse.getResponse();
            if (response.isExists()) {
                String json = response.getSourceAsString();
            }
        }
    }
    //批量插入，删除
    public static void bulk(){
        TransportClient client = getESClient();
        BulkRequestBuilder bulkRequest = client.prepareBulk();

        try {
            // either use client#prepare, or use Requests# to directly build index/delete requests
            bulkRequest.add(client.prepareIndex("twitter", "_doc", "1")
                    .setSource(jsonBuilder()
                            .startObject()
                            .field("user", "kimchy")
                            .field("postDate", new Date())
                            .field("message", "trying out Elasticsearch")
                            .endObject()
                    )
            );

            bulkRequest.add(client.prepareIndex("twitter", "_doc", "2")
                    .setSource(jsonBuilder()
                            .startObject()
                            .field("user", "kimchy")
                            .field("postDate", new Date())
                            .field("message", "another post")
                            .endObject()
                    )
            );

            BulkResponse bulkResponse = bulkRequest.get();
            if (bulkResponse.hasFailures()) {
                // process failures by iterating through each bulk response item
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static Pagination<Map<String,Object>> search(QueryBuilder query, QueryBuilder filter, SortBuilder sort, PageParam page, String... indices){
        TransportClient client = getESClient();
//        SearchResponse response = client.prepareSearch("index1", "index2")
        SearchRequestBuilder searchBuilder = client.prepareSearch(indices);
        /**
         QUERY_THEN_FETCH:          查询是针对所有的块执行的，但返回的是足够的信息，而不是文档内容（Document）。结果会被排序和分级，基于此，只有相关的块的文档对象会被返回。由于被取到的仅仅是这些，故而返回的 hit 的大小正好等于指定的 size。这对于有许多块的 index 来说是很便利的（返回结果不会有重复的，因为块被分组了）
         QUERY_AND_FETCH:           最原始（也可能是最快的）实现就是简单的在所有相关的 shard上执行检索并返回结果。每个 shard 返回一定尺寸的结果。由于每个shard已经返回了一定尺寸的hit，这种类型实际上是返回多个 shard的一定尺寸的结果给调用者。
         DFS_QUERY_THEN_FETCH：      与 QUERY_THEN_FETCH 相同，预期一个初始的散射相伴用来为更准确的 score 计算分配了的term频率。
         DFS_QUERY_AND_FETCH:       与 QUERY_AND_FETCH 相同，预期一个初始的散射相伴用来为更准确的 score 计算分配了的term频率。
         SCAN：              在执行了没有进行任何排序的检索时执行浏览。此时将会自动的开始滚动结果集。
         COUNT：             只计算结果的数量，也会执行 facet。
         */
        searchBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);


//        QueryStringQueryBuilder query = new QueryStringQueryBuilder(key);
//        query.analyzer("ik_smart");
//        query.field("title").field("content");

//        AnalyzeRequest ac = new AnalyzeRequest("news")
//                .field("answer")
//                .analyzer("base_ansj")
//                .text("我是中国人")
//                .explain(true);
//
//        AnalyzeRequestBuilder builder = new
//        DetailAnalyzeResponse dar = iac.analyze(ac).actionGet().detail();



        if(query!=null){
            searchBuilder.setQuery(query) ;                // Query  QueryBuilder
        }
        if(filter!=null){
            searchBuilder.setPostFilter(filter);    // Filter
        }
        if(sort!=null){
            searchBuilder.addSort(sort);
        }

//        BoolQueryBuilder booleanQuery = QueryBuilders.boolQuery();
//        booleanQuery.must(QueryBuilders.matchPhraseQuery("title", "好"));
//        booleanQuery.must(QueryBuilders.matchPhraseQuery("title", "中"));

//        QueryBuilder q = QueryBuilders.termQuery("gender", 2);
//        searchBuilder.setQuery(QueryBuilders.termQuery("gender", 2)) ;                // Query  QueryBuilder
//        searchBuilder.setQuery(QueryBuilders.termQuery("age", 20)) ;                // Query  QueryBuilder
//        QueryBuilder filter = QueryBuilders.rangeQuery("age").from(12).to(100);
//        searchBuilder.setPostFilter(QueryBuilders.rangeQuery("gender").from(0).to(2));    // Filter
//        searchBuilder.setPostFilter(QueryBuilders.rangeQuery("age").from(12).to(100));    // Filter
//        searchBuilder.addSort("age", SortOrder.ASC);//字符串字段
//        searchBuilder.addSort("gender", SortOrder.ASC);
        int pageFirst = page.getPageFirst();
        int pageSize = page.getPageSize();
        searchBuilder.setFrom(pageFirst);
        searchBuilder.setSize(pageSize);
//        // 设置高亮显示--->设置相应的前置标签和后置标签
//        searchBuilder.setHighlighterPreTags("<span color='blue' size='18px'>");
//        searchBuilder.setHighlighterPostTags("</span>");
//        // 哪个字段要求高亮显示
//        searchBuilder.addHighlightedField("author");
//        searchBuilder.addHighlightedField("url");
//        //聚合group---https://www.cnblogs.com/xionggeclub/p/7975982.html
//        TermsBuilder teamAgg= AggregationBuilders.terms("player_count ").field("team");
//        sbuilder.addAggregation(teamAgg);

        searchBuilder.setExplain(true);// 设置是否按查询匹配度排序
//        SearchResponse response = searchBuilder.get();
        SearchResponse response = searchBuilder.execute().actionGet();

        SearchHits hits = response.getHits();
        long totalCount =  hits.totalHits;
        System.out.println(hits.totalHits);
        Pagination<Map<String,Object>> result = new Pagination<Map<String,Object>>();
        List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
        for (SearchHit hit : hits) {
            Map<String,Object> map = hit.getSourceAsMap();
            System.out.println(hit.getId()+"--"+hit.getScore());
            String json = hit.getSourceAsString();
//            NewsInfo newsInfo = JsonUtils.readToObject(json, NewsInfo.class);
            System.out.println(json);
            list.add(map);
        }
        //PageUtil.get();
        for (Map<String,Object> m:list) {
            System.out.println(m);
        }
        result.setList(list);
        PageParam pageParam = PageUtil.get(page.getPageNum(),pageSize,totalCount);
        result.setPageParam(pageParam);
        return result;
    }


    public static void analyze(){
        TransportClient client = getESClient();
        IndicesAdminClient iac = client.admin().indices();

//        XContentBuilder setting = getSettingsBuilder();
//        PutMappingRequest mappingRequest = Requests.putMappingRequest("news").type("doc").source(setting);
//        iac.putMapping(mappingRequest).actionGet();

//        AnalyzeResponse r = iac.prepareAnalyze("中华人民共和国国歌").setAnalyzer("base_ansj").execute().actionGet();

        AnalyzeRequest ar = new AnalyzeRequest();
        ar.text("中华人民共和国国歌");
        ar.analyzer("base_ansj");//standard,simple,cjk
        AnalyzeResponse r = iac.analyze(ar).actionGet();
        //https://stackoverflow.com/questions/34894671/set-default-analyzer-of-index

        List<AnalyzeResponse.AnalyzeToken> tokens = r.getTokens();
        for (AnalyzeResponse.AnalyzeToken token : tokens)
        {
            System.out.println(token.getTerm());
        }

    }

    public static void test() throws Exception{
        TransportClient client = getESClient();
        // url test:http://192.168.1.108:9200/twitter/_analyze?analyzer=ik&text=%E6%B5%8B%E8%AF%95elasticsearch%E5%88%86%E8%AF%8D%E5%99%A8%E7%9A%84%E6%95%88%E6%9E%9C&pretty=true//1.create a index
//        client.admin().indices().prepareCreate("news").execute().actionGet();
        //2.create a mapping

        /**
         * "settings": {
             "analysis": {
                 "analyzer": {
                     "my_english_analyzer": {
                         "type": "standard",
                         "max_token_length": 5,
                         "stopwords": "_english_"
                     }
                 }
             }
            }
         */

        XContentBuilder mapping =XContentFactory.jsonBuilder()
                .startObject("settings")
                    .startObject("analysis")
                        .startObject("analyzer")
                            .startObject("base_ansj")
                                .field("type","standard")
                                .field("max_token_length","5")
                                .field("stopwords","_english_")
                            .endObject()
                        .endObject()
                    .endObject()
                .endObject();
        PutMappingRequest mappingRequest = Requests.putMappingRequest("news").type("doc").source(mapping);
        client.admin().indices().putMapping(mappingRequest).actionGet();
        //3.index some docs
        XContentBuilder builder1 =XContentFactory.jsonBuilder().startObject().field("content","美国留给伊拉克的是个烂摊子吗").endObject();
        XContentBuilder builder2 =XContentFactory.jsonBuilder().startObject().field("content","公安部：各地校车将享最高路权").endObject();
        BulkRequestBuilder bulkRequest = client.prepareBulk();
        bulkRequest.add(client.prepareIndex("news", "doc", "1").setSource(builder1))
                .add(client.prepareIndex("news", "doc", "2").setSource(builder2));
        BulkResponse bulkResponse = bulkRequest.execute().actionGet();
        if (bulkResponse.hasFailures()) {
        }
        //4.query with highlighting
        SearchRequestBuilder builder = client.prepareSearch("news").setTypes("fulltext").setQuery(QueryBuilders.termQuery("question","你好"));
        SearchResponse searchResponse = builder.execute().actionGet();
        SearchHits hits = searchResponse.getHits();
        long total = hits.getTotalHits();
        for (SearchHit hit : hits) {
            System.out.println(hit.toString());
//            Map<String, HighlightField> result = hit.highlightFields();
//            HighlightField titleField = result.get("content");
//            Text[] titleTexts = titleField.fragments();
//            for (Text text : titleTexts) {
//                System.out.println(text);
//            }
        }
    }
    public static void testSearch(){


//        BoolQueryBuilder booleanQuery = QueryBuilders.boolQuery();
//        booleanQuery.must(QueryBuilders.matchPhraseQuery("title", "好"));
//        booleanQuery.must(QueryBuilders.matchPhraseQuery("title", "中"));

//        QueryBuilder query = QueryBuilders.matchPhraseQuery("username", "中国");
//        QueryBuilder query = QueryBuilders.termQuery("gender", 2);
//        searchBuilder.setQuery(QueryBuilders.termQuery("gender", 2)) ;                // Query  QueryBuilder
//        searchBuilder.setQuery(QueryBuilders.termQuery("age", 20)) ;                // Query  QueryBuilder
//        QueryBuilder filter = QueryBuilders.rangeQuery("age").from(12).to(100);
//        SortBuilder sort = SortBuilders.fieldSort("age").order(SortOrder.DESC);
//        QueryBuilder filter = QueryBuilders.rangeQuery("age").from(12).to(100);
//        SortBuilder sort = SortBuilders.fieldSort("age").order(SortOrder.DESC);


        PageParam page = PageUtil.get(1,10);

        //        QueryBuilder query = QueryBuilders.matchPhraseQuery("content", "在理");
        QueryStringQueryBuilder query = new QueryStringQueryBuilder("在理");
        query.analyzer("query_ansj");
        query.field("content");
//        query.field("question").field("answer");
        System.out.println(query.toString()+"===");
        Pagination<Map<String,Object>> p = ESManager.search(query,null,null,page,"news");
        List<Map<String,Object>> list = p.getList();
        for (Map<String,Object> m:list) {
            System.out.println(m);
        }
    }
    public static void main(String[] args) throws Exception{
       // http://127.0.0.1:9200/news/_search?q=content:%E5%9C%A8%E7%90%86
        String index =  "news";
        String type = "_doc";
        String id = UUIDUtil.uuid();
        Map<String, Object> doc = new LinkedHashMap<String,Object>();
        doc.put("title","昨日新闻");
        doc.put("content","刘述说的确实在理");
        doc.put("author","刘强");
        doc.put("time","2018-11-28 18:00:02");

        ConfigProperties.IP="127.0.0.1";
        ConfigProperties.PORT=9300;

//        analyze();
//        createIndex(index);//step 1
//        deleteIndex(index);
//        setMappings(index,type);//step2
//        index(index,type,id,doc);//step3
//        delete(index,type,"59fa162c45314ea2b0433fbf0b1517f2");
//        Map<String,Object>  map = get(index,type,id);
//        System.out.println(map);

        testSearch();//step4




    }
}
